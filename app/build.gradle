import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * The contents of this file are subject to the Common Public Attribution License Version 1.0.
 * (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 * https://github.com/Slion/Fulguris/blob/main/LICENSE.CPAL-1.0.
 * The License is based on the Mozilla Public License Version 1.1, but Sections 14 and 15 have been
 * added to cover use of software over a computer network and provide for limited attribution for
 * the Original Developer. In addition, Exhibit A has been modified to be consistent with Exhibit B.
 *
 * Software distributed under the License is distributed on an "AS IS" basis, WITHOUT WARRANTY OF
 * ANY KIND, either express or implied. See the License for the specific language governing rights
 * and limitations under the License.
 *
 * The Original Code is Fulguris.
 *
 * The Original Developer is the Initial Developer.
 * The Initial Developer of the Original Code is Stéphane Lenclud.
 *
 * All portions of the code written by Stéphane Lenclud are Copyright © 2020 Stéphane Lenclud.
 * All Rights Reserved.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
    id 'jacoco'
    id 'com.github.ben-manes.versions'
    id 'de.mobilej.unmock'
    id 'com.google.devtools.ksp'
    id("com.anthonycr.plugins.mezzanine") version "2.1.0"
}

// See: https://stackoverflow.com/a/53408667/3969362
// Conditionally apply Firebase Google Plugins to flavors that needs it
android.productFlavors.all { flavor ->
    if (getGradle().getStartParameter().getTaskRequests().toString().toLowerCase().contains(flavor.name)) {
        // Only download and playstore flavor need Firebase
        if (flavor.name == "download" || flavor.name == "playstore") {
            // pass
        }
    }
}

// TODO: Find a way to put it the variant/type folder such as: generated/source/locale/slionsFullDownload/debug/acr/browser/lightning/locale
def generatedLocaleListDir = layout.buildDirectory.dir('generated/source/locale/fulguris/locale')

android {
    compileSdkVersion project.targetSdkVersion
    // Specify namespace for generated R and BuildConfig classes
    namespace 'fulguris'

    defaultConfig {
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        vectorDrawables.useSupportLibrary = true
    }

    sourceSets {
        main {
            java {
                srcDirs += generatedLocaleListDir
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            // See: https://github.com/Slion/Fulguris/issues/116
            // If we disable minify then we need multi DEX.
            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-project.txt'
            applicationIdSuffix ".debug"
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }

        release {
            debuggable false
            multiDexEnabled false
            // If you disable minify you need to make sure multi DEX library is loaded in release or you will get crashed on Android 5 devices and below
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-project.txt'
            // Use debug signing for now
            //signingConfig debug.signingConfig

            ndk {
                //abiFilters "arm64-v8a", "armeabi-v7a", "armeabi", "mips"
            }
            enableUnitTestCoverage false
            enableAndroidTestCoverage false
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                // This option needs to be included for robolectric tests
                includeNoLocationClasses = true
                excludes = ['jdk.internal.*']
            }
        }
    }

    flavorDimensions "BRAND", "VERSION", "PUBLISHER"

    productFlavors {

        uibrowser {
            dimension "BRAND"
            applicationId "yuce.browser.mini"
            versionCode 20
            versionName '1.2.0'
        }

        // Base version does not add application ID suffix
        base {
            dimension "VERSION"
            buildConfigField "boolean", "FULL_VERSION", "Boolean.parseBoolean(\"true\")"
        }

        playstore {
            dimension "PUBLISHER"
            buildConfigField "fulguris.Sponsorship", "SPONSORSHIP", "fulguris.Sponsorship.GOLD"
        }

    }

    packagingOptions {
        resources {
            excludes += ['.readme']
        }
    }

    // Taken from: https://stackoverflow.com/a/59583066/3969362
    // Needed to customize our APK file name per flavor
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def versionName = variant.versionName
            //def versionCode = variant.versionCode // e.g 1.0
            //def flavorName = variant.flavorName // e. g. Free
            //def buildType = variant.buildType.name // e. g. debug
            //def variantName = variant.name // e. g. FreeDebug

            outputFileName = outputFileName.replaceFirst("^$archivesBaseName", "Uibrowser-v$versionName")
        }

        // Allow application id access from resources, most useful for explicit intent
        variant.resValue "string", "application_id", "\"${applicationId}\""
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        // That should give us both view and data binding
        dataBinding true
        // We notably use build config to define our sponsorships
        buildConfig true
    }
    lint {
        abortOnError true
    }
}

jacoco {
    toolVersion = '0.8.7' // See http://www.eclemma.org/jacoco/
}

// unMock is required for tests that use android.net.Uri
unMock {
    keepStartingWith "libcore."
    keep "android.net.Uri"
    keepAndRename "java.nio.charset.Charsets" to "xjava.nio.charset.Charsets"
}

dependencies {
    // Multi DEX is only needed in debug and on older devices from Android 5 and below.
    // If you disable minify in release mode you also need to load and install that library in release for those devices.
    // See [BrowserApp.attachBaseContext]
    // See: https://github.com/Slion/Fulguris/issues/116
    debugImplementation 'androidx.multidex:multidex:2.0.1'

    // test dependencies
    implementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0', {
        exclude group: 'org.jetbrains.kotlin'
    }
    testImplementation 'org.robolectric:robolectric:4.4'

    // Jetpack AndroidX libraries
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.annotation:annotation:1.9.1"
    implementation "androidx.vectordrawable:vectordrawable-animated:1.2.0"
    implementation "androidx.appcompat:appcompat:1.7.1"
    implementation "androidx.recyclerview:recyclerview:1.4.0"
    // Needs to upgrade target SDK
    implementation "androidx.core:core-ktx:1.16.0"
    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation "androidx.constraintlayout:constraintlayout:2.2.1"
    implementation "androidx.fragment:fragment-ktx:1.8.9"
    implementation "androidx.drawerlayout:drawerlayout:1.2.0"
    implementation 'androidx.preference:preference-ktx:1.2.1'
    // Webkit: https://developer.android.com/jetpack/androidx/releases/webkit
    implementation 'androidx.webkit:webkit:1.10.0'
    implementation "com.google.android.material:material:1.12.0"
    implementation project(path: ":Preference")

    // html parsing for reading mode
    implementation 'org.jsoup:jsoup:1.13.1'

    // reading mode
    implementation 'net.dankito.readability4j:readability4j:1.0.8'

    // Built-in files support
    implementation("com.anthonycr.mezzanine:core:2.1.0")
    ksp("com.anthonycr.mezzanine:processor:2.1.0")

    // dependency injection
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:hilt-android:$daggerVersion"
    kapt "com.google.dagger:hilt-compiler:$daggerVersion"

    compileOnly 'javax.annotation:jsr250-api:1.0'

    // proxy support
    implementation 'net.i2p.android:client:0.9.49'
    implementation 'net.i2p.android:helper:0.9.5'

    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    //implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Volley HTTP request
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.4.7'
    implementation 'com.jakewharton.timber:timber:5.0.1'
}


// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Fulguris provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales.
// This code was taken from Mozilla Focus project:
// https://github.com/mozilla-mobile/focus-android
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-")
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    }.collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs.sort { it }
}

def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdirs()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        project.logger.lifecycle(localeList.path)

        localeList.delete()
        localeList.createNewFile()
        localeList << "package fulguris.locale;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.configureEach { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

mezzanine {
    files = files(
            "src/main/js/TextReflow.js",
            "src/main/html/list.html",
            "src/main/html/bookmarks.html",
            "src/main/html/homepage.html",
            "src/main/html/private.html",
            "src/main/js/InvertPage.js",
            "src/main/js/SetMetaViewport.js",
            "src/main/js/ThemeColor.js"
    )
}


kotlin {
    jvmToolchain(17)
}
